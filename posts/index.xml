<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on dswij</title><link>https://dswij.github.io/posts/</link><description>Recent content in Posts on dswij</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>dswijj@gmailcom</managingEditor><webMaster>dswijj@gmailcom</webMaster><lastBuildDate>Sat, 09 Mar 2024 08:11:39 +0800</lastBuildDate><atom:link href="https://dswij.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Deadlocks in the wild</title><link>https://dswij.github.io/posts/2/</link><pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate><author>dswijj@gmailcom</author><guid>https://dswij.github.io/posts/2/</guid><description>Deadlock is a tale as old as concurrency, and I&amp;rsquo;ve personally seen a fair share of it working with conventional, relational databases. But most recently, I stumbled upon a deadlock in h2
The issue With a really high max concurrent stream count with a huge payload in HTTP/2, combined with a high number of Futures in a single connection, hyper client quickly hung. The time it took to get stuck seems random at first, but after tweaking some settings here and there, I got it to hang after 5 request-response most of the time.</description></item><item><title>Please, *blame*</title><link>https://dswij.github.io/posts/1/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><author>dswijj@gmailcom</author><guid>https://dswij.github.io/posts/1/</guid><description>Foreword I am not an advocate of blame. blame here refers to - as some of you might have guessed - git blame. This topic has been discussed all over the internet (insert some articles about git blame and the power of git blame), but I have seen far too many projects, blameless. And for this reason, allow me to reiterate this in a blog post, in the hopes that someone might find their way here.</description></item></channel></rss>